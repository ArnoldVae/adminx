<template>
	<div class="data-dict">
		<div class="form-operation">
			<searche-header-wrapper>
				<form-item title="字典组编号" type="number" v-model="searchInfo.number" placeholder="输入编号搜索"></form-item>
				<form-item title="字典组名称" type="text" v-model="searchInfo.name" placeholder="输入名称搜索" clearable></form-item>
				<form-item
					type="select"
					title="状态"
					class="enable"
					v-model="searchInfo.enable"
					placeholder="请选择是否启用"
					:options="searchInfoEnableList"
					:setings="{ value: 'value', label: 'label' }"
				>
				</form-item>
				<Button type="info" icon="md-search" class="search" @click="handleQueryDictList">查询</Button>
				<Button type="primary" icon="md-refresh" class="reset" @click="handleResetQueryDictList">重置</Button>
				<Button type="success" icon="md-add" class="add" @click="handleOpenAddModalGroup">新增</Button>
			</searche-header-wrapper>
		</div>
		<div class="table">
			<Table @on-row-dblclick="handleExpandRow" height="670" border highlight-row :columns="columns" :data="tableData">
				<template slot-scope="{ row }" slot="isEnable">
					<span v-if="row.isEnable == 1" :style="{ color: '#19be6b' }">启用</span>
					<span v-if="row.isEnable == 0" :style="{ color: '#ff9900' }">禁用</span>
				</template>
				<template slot-scope="{ row, index }" slot="action">
					<Button size="small" type="warning" icon="ios-create-outline" @click="handleOpenAddModalEdit(row)">编辑</Button>
					<Button size="small" type="error" icon="md-trash" class="delete" @click="handleDeleteDataDictList(row, index)">删除</Button>
				</template>
			</Table>

			<Page
				@on-change="handleChangePage"
				@on-page-size-change="handleChangeSize"
				:total="total"
				:current="page"
				:page-size="pageSize"
				show-sizer
				show-elevator
				show-total
			/>
		</div>
		<!-- 新增界面 -->
		<Modal
			@on-ok="addAndEditModalOk"
			@on-cancel="addAndEditModalCancel"
			class="addAndEditModal"
			v-model="addAndEditModal"
			:title="currentActionTite"
			:mask-closable="false"
			width="400"
		>
			<Form :rules="modalInfoRule" ref="modalInfo" :model="modalInfo" :label-width="100">
				<FormItem v-show="currentAction == 'group'" label="字典组编号" prop="number">
					<Input :disabled="currentActionTite == '编辑字典组'" v-model.trim="modalInfo.number" placeholder="输入字典组编号" />
				</FormItem>
				<FormItem v-show="currentAction !== 'group'" label="字典组名称" prop="groupName">
					<Input
						type="text"
						:disabled="currentActionTite == '添加字典' || currentActionTite == '编辑字典'"
						v-model="modalInfo.groupName"
						placeholder="输入字典组名称"
					/>
				</FormItem>
				<FormItem label="名称" prop="name">
					<Input type="text" v-model="modalInfo.name" placeholder="输入名称" clearable />
				</FormItem>
				<FormItem label="状态" prop="enable" class="enable">
					<RadioGroup v-model="modalInfo.enable">
						<Radio v-for="item in modalInfoEnableList" :label="item.value" :key="item.value">
							{{ item.label }}
						</Radio>
					</RadioGroup>
				</FormItem>
				<FormItem label="标识" prop="identification">
					<Input type="text" v-model="modalInfo.identification" placeholder="输入字典组标识" />
				</FormItem>
				<FormItem label="排序" prop="sort">
					<Input type="text" v-model="modalInfo.sort" placeholder="输入排序数值" />
				</FormItem>
				<FormItem label="备注" prop="remark">
					<Input type="textarea" v-model="modalInfo.remark" placeholder="输入字典组备注" :autosize="{ minRows: 2, maxRows: 5 }" clearable />
				</FormItem>
			</Form>

			<div slot="footer">
				<Button type="text" size="large" @click="addAndEditModalCancel">取消</Button>
				<Button type="primary" size="large" @click="addAndEditModalOk">确认</Button>
			</div>
		</Modal>
	</div>
</template>
<script>
import { findComponentDownward } from '@/libs/assist'
import expandRow from './table-expand'
export default {
	name: 'data-dict',
	components: {},
	props: {},
	data() {
		// 表单验证
		const validateIdent = (rule, value, callback) => {
			if (!/^\d+(?=\.{0,1}\d+$|$)/.test(value)) {
				callback(new Error('请输入数字'))
			} else {
				callback()
			}
		}
		return {
			// 表单搜索相关
			searchInfo: {
				number: '',
				name: '',
				enable: 'all'
			},
			searchInfoEnableList: [
				{
					value: 'all',
					label: '全部'
				},
				{
					value: 0,
					label: '禁用'
				},
				{
					value: 1,
					label: '启用'
				}
			],
			modalInfoEnableList: [
				{
					value: 1,
					label: '启用'
				},
				{
					value: 0,
					label: '禁用'
				}
			],
			// 表格相关
			columns: [
				{
					type: 'expand',
					width: 30,
					align: 'center',
					render: (h, params) => {
						return h(expandRow, {
							props: {
								rowData: params.row.dictDataList,
								rowIndex: params.index
							}
						})
					}
				},
				{
					title: '字典组编号',
					key: 'dictGroupID',
					align: 'center'
				},
				{
					title: '名称',
					key: 'vcName',
					align: 'center'
				},
				{
					title: '是否启用',
					slot: 'isEnable',
					align: 'center'
				},
				{
					title: '标识',
					key: 'flag',
					align: 'center'
				},
				{
					title: '备注',
					key: 'vcMemo',
					align: 'center'
				},
				{
					title: '类型',
					key: 'type',
					align: 'center'
				},
				{
					title: '排序',
					key: 'sort',
					align: 'center'
				},
				{
					title: '操作',
					slot: 'action',
					align: 'center',
					width: 200
				}
			],
			tableData: [],
			total: null,
			page: 1,
			pageSize: 20,
			// 添加弹窗
			addAndEditModal: false,
			modalInfo: {
				number: null,
				name: null,
				groupName: null,
				enable: null,
				identification: null,
				sort: null,
				remark: null
			},
			currentAction: null,
			currentActionTite: '',
			modalInfoRule: {
				number: [
					{ required: true, message: '该项为必填项', trigger: 'blur' },
					{ pattern: /^[0-9]\d*$/, message: '请正确输入数字编号', trigger: 'change' },
					{ pattern: /^.{0,8}$/, message: '最多输入8位', trigger: 'change' }
				],
				name: [
					{ type: 'string', required: true, message: '请输入名称', trigger: 'blur' },
					{ pattern: /^.{0,50}$/, message: '最多输入50字', trigger: 'change' }
				],
				// identification: [{ validator: validateIdent, trigger: 'blur' }]
				identification: [{ pattern: /^[0-9]\d{0,3}$/, message: '请正确输入四位以内标识数字', trigger: 'change' }],
				sort: [{ pattern: /^[0-9]\d{0,3}$/, message: '请正确输入入四位以内排序数字', trigger: 'change' }],
				remark: [{ pattern: /^.{0,100}$/, message: '最多输入100字', trigger: 'change' }]
			},
			// 当前会话子集Index
			currentSourceIndex: null
		}
	},
	computed: {},
	filters: {},
	watch: {
		currentAction(newVal, oldVal) {
			// console.log(newVal);
			if (newVal === 'group') {
				this.modalInfoRule.number = [
					{ required: true, message: '该项为必填项', trigger: 'blur' },
					{ pattern: /^[0-9]\d*$/, message: '请正确输入数字编号', trigger: 'change' },
					{ pattern: /^.{0,8}$/, message: '最多输入8位', trigger: 'change' }
				]
			} else {
				this.modalInfoRule.number = []
			}
		}
	},
	created() {
		this.getDataDictList()
	},
	mounted() {},
	activited() {},
	update() {},
	beforeDestory() {},
	methods: {
		// 查询字典组列表
		handleQueryDictList() {
			this.page = 1
			this.getDataDictList()
		},
		// 重置查询
		handleResetQueryDictList() {
			this.$set(this.searchInfo, 'number', '')
			this.$set(this.searchInfo, 'name', '')
			this.$set(this.searchInfo, 'enable', 'all')
			this.page = 1
			this.pageSize = 20
			this.getDataDictList()
		},
		// 新增字典组
		handleOpenAddModalGroup() {
			this.$set(this.modalInfo, 'enable', 1)
			this.addAndEditModal = true
			this.currentAction = 'group'
			this.currentActionTite = '新增字典组'
		},
		// 编辑字典组
		handleOpenAddModalEdit(row) {
			console.log(row)
			this.$set(this.modalInfo, 'number', row.dictGroupID + '')
			this.$set(this.modalInfo, 'name', row.vcName)
			this.$set(this.modalInfo, 'enable', row.isEnable)
			this.$set(this.modalInfo, 'identification', row.flag)
			this.$set(this.modalInfo, 'sort', row.sort)
			this.$set(this.modalInfo, 'remark', row.vcMemo)
			this.addAndEditModal = true
			this.currentAction = 'group'
			this.currentActionTite = '编辑字典组'
		},
		// 表单确认验证
		addAndEditModalOk() {
			let _this = this
			this.$refs['modalInfo'].validate(valid => {
				if (valid) {
					if (_this.currentActionTite == '新增字典组') {
						_this.addAndEditModal = false
						this.addDataDictList()
					} else if (this.currentActionTite == '编辑字典组') {
						_this.addAndEditModal = false
						this.editDataDictList()
					} else if (this.currentActionTite == '编辑字典') {
						_this.addAndEditModal = false
						findComponentDownward(this, 'table-expand').editDataDict(this.currentSourceIndex)
					} else if (this.currentActionTite == '添加字典') {
						_this.addAndEditModal = false
						findComponentDownward(this, 'table-expand').addDataDict(this.currentSourceIndex)
					}
				} else {
					this.$Message.error('请完整正确填写')
				}
			})
			// setTimeout(() => {
			// this.$refs['modalInfo'].resetFields()
			// }, 200)
		},
		// 表单取消
		addAndEditModalCancel() {
			this.addAndEditModal = false
			this.$refs['modalInfo'].resetFields()
		},
		// 获取字典码列表
		async getDataDictList() {
			let currentEnable = ''
			if (this.searchInfo.enable != 'all') {
				currentEnable = this.searchInfo.enable
			}
			let result = await this.$api.dataDict.getDataDictList({
				pageSize: this.pageSize,
				currentPage: this.page,
				dictGroupID: this.searchInfo.number,
				vcName: this.searchInfo.name,
				isEnable: currentEnable
			})
			if (result.success) {
				this.tableData = result.data.lists
				// console.log(this.tableData)
				// 处理null类型数据
				this.tableData.forEach(item => {
					Object.keys(item).forEach(ctem => {
						if (item[ctem] === null) {
							item[ctem] = ''
						}
					})
				})
				this.total = result.data.page.totalNum
			} else {
				this.total = 0
			}
		},
		// 点击分页
		handleChangePage(page) {
			this.page = page
			this.getDataDictList()
		},
		// 更新分页大小
		handleChangeSize(size) {
			this.pageSize = size
			this.getDataDictList()
		},
		// 新增数据字典组
		async addDataDictList() {
			let result = await this.$api.dataDict.addDataDictList({
				dictGroupID: this.modalInfo.number,
				vcName: this.modalInfo.name,
				isEnable: this.modalInfo.enable,
				flag: this.modalInfo.identification,
				sort: this.modalInfo.sort,
				vcMemo: this.modalInfo.remark,
				type: 0
			})
			if (result.code == 200) {
				this.$Message.success('新增成功')
				this.getDataDictList()
			} else {
				this.$Message.error(result.msg)
			}
		},
		// 编辑数据字典组
		async editDataDictList() {
			let result = await this.$api.dataDict.editDataDictList({
				dictGroupID: this.modalInfo.number,
				vcName: this.modalInfo.name,
				isEnable: this.modalInfo.enable,
				flag: this.modalInfo.identification,
				sort: this.modalInfo.sort,
				vcMemo: this.modalInfo.remark,
				type: 0
				// sort: 2
			})
			if (result.code == 200) {
				this.$Message.success('编辑成功')
				this.getDataDictList()
			} else {
				this.$Message.error('编辑失败')
			}
		},
		// 删除数据字典组相关HTTP
		async deleteDataDictList(id) {
			let result = await this.$api.dataDict.deleteDataDictList({
				dictGroupID: id
			})
			if (result.code == 200) {
				this.$Message.success('删除成功')
				this.getDataDictList()
			} else {
				this.$Message.error('删除失败')
			}
		},
		handleDeleteDataDictList(row, index) {
			if (this.tableData[index] && this.tableData[index].dictDataList.length > 0) {
				return this.$Message.warning('该字典组存在字典，请清空字典后删除')
			}
			this.$Modal.confirm({
				title: '警告',
				content: '确认删除吗？',
				onOk: () => {
					this.deleteDataDictList(row.dictGroupID)
				}
			})
		},
		// 双击展开当前行
		handleExpandRow(row, index) {
			// 关闭其他的行
			this.tableData.forEach((item, tableDataIndex) => {
				if (tableDataIndex != index) {
					this.$set(this.tableData[tableDataIndex], '_expanded', false)
				}
			})
			// 确保渲染与数据统一
			this.$nextTick(() => {
				let bool = !this.tableData[index]['_expanded']
				this.$set(this.tableData[index], '_expanded', bool)
			})
		}
	},
	beforeRouteEnter(to, from, next) {
		next()
	},
	beforeRouteUpdate(to, from, next) {
		next()
	},
	beforeRouteLeave(to, from, next) {
		next()
	}
}
</script>
<style lang="stylus">
.data-dict {
	.form-operation {
		.form-item {
			margin-bottom: initial;
		}
		.search,.add {
			float: left;
		}
		.add,.reset {
			margin-left: 10px;
		}
	}
	.table {
		> .ivu-table-wrapper {
			height: calc(100vh - 265px) !important;
			> .ivu-table {
				> .ivu-table-body {
					height: calc(100vh - 305px) !important;
				}
				> .ivu-table-tip {
					height: calc(100vh - 305px) !important;
					td {
						height: calc(100vh - 305px) !important;
					}
				}
			}
		}
		.ivu-page {
			margin-top: 18px;
			display: flex;
			justify-content: center;
			align-items: center;
		}
		.delete {
			margin-left: 5px;
		}
		/deep/ .ivu-table-expanded-cell {
			padding: 18px;
			padding-top: 0;
		}
	}
}
</style>
