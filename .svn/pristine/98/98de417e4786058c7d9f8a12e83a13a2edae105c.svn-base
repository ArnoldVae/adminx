<template>
	<div class="sync-compared">
		<!-- 左侧树 -->
		<div class="left-tree">
			<search-tree :data="treeData" @on-select-change="handleStationTree" placeholder="输入关键词搜索...">
				<Icon type="ios-search" slot="suffix" />
			</search-tree>
		</div>
		<div class="right-content">
			<!-- <div class="search-bar">
        <searche-Header-Wrapper>
          <form-item
            title="测点名称"
            type="text"
            v-model="searchData.vcName"
            placeholder="输入测点名称查询"
            clearable
            noMBottom
          ></form-item>
          <Button type="info" size="large" icon="md-search" @click="handlesearch">查询</Button>
          <Button type="primary" size="large" icon="md-refresh" @click="handleResetData">重置</Button>
        </searche-Header-Wrapper>
      </div>-->
			<!-- 表格区 -->
			<div class="table-content">
				<Table border ref="selection" :columns="tableColumns" :data="tableData" height="780"></Table>
				<!-- 分页 -->
				<!-- <div class="table-page">
          <div class="page-content">
            <Page
              @on-change="handleChangePage"
              @on-page-size-change="handleChangePageSize"
              :total="total"
              :current="page"
              :page-size="pageSize"
              show-elevator
              show-total
              show-sizer
            />
          </div>
        </div> -->
			</div>
		</div>
	</div>
</template>
<script>
import subTable from './subTable'
export default {
	name: 'sync-compared',
	components: {},
	props: {},
	data() {
		return {
			axios: this.$api.syncCompared,
			pageFlag: false,
			searchData: {
				vcName: ''
			},
			treeData: [],
			dtuId: '',
			tableColumns: [
				{
					title: '测点名称',
					key: 'vcName',
					width: 200,
					align: 'center'
				},
				{
					title: '测点编码',
					key: 'vcNodeCode',
					minWidth: 150,
					maxWidth: 200,
					align: 'center'
				},
				{
					title: '变化类型',
					key: 'operType1',
					width: 100,
					align: 'center'
				},
				{
					title: '原信息',
					key: 'preInfo',
					minWidth: 150,
					align: 'center',
					render: (h, params) => {
						return h(subTable, {
							props: {
								row: params.row.preInfo
							}
						})
					}
				},
				{
					title: '变更后信息',
					key: 'postInfo',
					minWidth: 150,
					align: 'center',
					render: (h, params) => {
						return h(subTable, {
							props: {
								row: params.row.postInfo
							}
						})
					}
				}
			],
			tableData: [],
			total: 0,
			page: 1,
			pageSize: 20
		}
	},
	computed: {},
	filters: {},
	watch: {},
	created() {
		this.getGatewayTree()
	},
	mounted() {},
	activited() {},
	update() {},
	beforeDestory() {},
	methods: {
		_forEach: function(data, isTrue, callback) {
			var arr = []
			for (var i = 0; i < data.length; i++) {
				arr.push(data[i])
			}
			while (arr.length) {
				var _p = arr.shift()
				if (callback(_p) == false) {
					return
				}
				if (isTrue && _p.children) {
					for (var j = _p.children.length - 1; j >= 0; j--) {
						arr.unshift(_p.children[j])
					}
				}
			}
		},
		// 获取网关树
		getGatewayTree() {
			this.axios.getTreeList({ iFlag: 3 }).then(res => {
				if (res.code == 200 && res.data) {
					let flgaNum = 2
					this._forEach(res.data, true, item => {
						item.expand = true
						if (item.flag == flgaNum) {
							this.dtuId = item.dtuId
							item.selected = true
							flgaNum = 'a'
						}
					})
					this.treeData = res.data
					this.getTable()
				}
			})
		},
		// 树点击
		handleStationTree(data) {
			// console.log(data)
			if (data[0].flag == 2) {
				this.dtuId = data[0].id
				this.getTable()
			} else {
				this.dtuId = ''
				this.tableData = []
			}
		},

		// handleChangePage(page) {
		// 	this.page = page
		// 	this.getTable()
		// },
		// handleChangePageSize(pageSize) {
		// 	this.pageSize = pageSize
		// 	this.getTable()
		// },

		// 获取表格
		getTable(type) {
			let params = {
				// page: {
				// 	pageNum: this.page,
				// 	pageSize: this.pageSize
				// },
				acSmtypeEntity: {
					dtuId: this.dtuId
				}
			}
			this.axios.getTableList(params).then(res => {
				if (res.code == 200) {
					this.tableData = res.data.lists
					this.tableData.forEach(item => {
						item.operType1 = item.operType == 0 ? '新增' : item.operType == 1 ? '修改' : item.operType == 2 ? '删除' : item.operType
					})
					this.total = res.data.page.totalNum
				}
			})
		}
	}
}
</script>
<style lang="stylus" scoped>
.sync-compared {
  width: 100%;
  // height: calc(100vh - 140px);

  .left-tree {
    width: 260px;
    height: calc(100vh - 140px);
    background-color: #fff;
    border: 10px solid #fff;
    overflow: auto;
    float: left;
  }

  .right-content {
    width: calc(100% - 270px);
    height: 100% !important;
    float: left;
    margin-left: 10px;

    .search-bar {
      .ivu-btn {
        margin-right: 10px;
      }

      .search-header-wrapper .form-item span {
        font-size: 14px;
      }

      .ivu-input-wrapper input {
        font-size: 14px;
      }
    }

    .table-content {
      width: 100%;
    // height: 100% !important;
      // position: relative;

      /deep/ .ivu-table-wrapper {
       	height: calc(100vh - 140px) !important;
		.ivu-table-body,
		.ivu-table-overflowY,
		.ivu-table-tip,
		.ivu-table-tip td {
			height: calc(100vh - 180px) !important;
		}

      }

      /deep/.ivu-table {
        p {
          color: #19be6b;
        }

        b {
          font-weight: 400;
          color: #ff9900;
        }

        i {
          font-style: normal;
        }
      }

      /deep/tr.ivu-table-row-hover td {
        background-color: #F5F7FA;
      }

      /deep/.ivu-btn {
        font-size: 14px;
      }

      .table-page {
        width: 100%;
        position: absolute;
        bottom: -15px;

        .page-content {
          width: 800px;
          margin-left: 50%;
          transform: translateX(-50%);
        }
      }
    }
  }
}
</style>
