<template>
	<div class="device-modeling-modal">
		<div class="center">
			<!-- 左边 -->
			<div class="tree">
				<Tabs>
					<TabPane label="组织" icon="md-globe">
						<org-tree
							@sendActiveNodeTitle="updateOrgTreeActiveNodeTitle"
							@sendActiveNodeType="updateOrgTreeActiveNodeType"
							@sendActiveNodeId="updateOrgTreeActiveNodeId"
							@sendActiveOrgId="updateOrgTreeActiveOrgId"
							@sendActiveStationId="updateOrgTreeActiveStationId"
							@hook:mounted="orgTreeIsStart = true"
						>
						</org-tree>
					</TabPane>
					<TabPane label="子系统" icon="md-construct">
						<SearchTree @on-select-change="handleSelectNodes" ref="typeTree" clearable :data="treeData" placeholder="请输入关键词搜索...">
							<Icon type="ios-search" slot="suffix" />
						</SearchTree>
					</TabPane>
				</Tabs>
			</div>
			<!-- 右边 -->
			<div class="container">
				<div class="operation">
					<searche-header-wrapper>
						<form-item type="text" title="设备名称" v-model="searchInfo.devicename" placeholder="输入设备名称搜索" clearable></form-item>
						<Button size="large" type="info" icon="md-search" class="search" @click="handleQueryList">查询</Button>
						<Button size="large" type="primary" icon="md-refresh" class="reset" @click="handleResetList">重置</Button>
					</searche-header-wrapper>
				</div>

				<Table
					:loading="tableLoading"
					@on-current-change="handleSelectChange"
					:row-class-name="rowClassName"
					border
					height="680"
					highlight-row
					:columns="columns"
					:data="tableData"
				>
				</Table>

				<Page
					@on-change="handleChangePage"
					@on-page-size-change="handleChangeSize"
					:total="total"
					:current="page"
					:page-size="pageSize"
					show-sizer
					show-elevator
					show-total
				/>
			</div>
		</div>

		<div class="footer">
			<Button size="large" class="cancelBut" @click="cancelClick">取消</Button>
			<Button size="large" type="primary" class="confirmBut" @click="confirmClick">确定</Button>
		</div>
	</div>
</template>
<script>
import orgTree from '../device-modeling/org-tree'
import { log } from 'util'
export default {
	name: 'device-modeling-modal',
	components: { orgTree },
	props: {
		isShow: Boolean
	},
	data() {
		return {
			isDialog: false,
			orgTreeIsStart: false,
			// 监听子组件是否准备完毕，然后触发父组件计算属性
			orgTreeIsStart: false,
			// 类型树数据源
			treeData: [],
			tableData: [],
			tableLoading: false,
			// 子组件org-tree的必要参数值
			activeOrgTreeOrgTitle: '',
			activeOrgTreeOrgId: '',
			activeOrgTreeStationId: '',
			activeOrgTreeNodeId: '',
			activeOrgTreeNodeType: '',
			// 当前节点id
			activeNodeId: '',
			// 当前子系统id
			activeSubsystemId: '',
			// 当前设备类型id
			activeDeviceTypeId: '',
			// 搜索表单数据模型
			searchInfo: {
				devicename: ''
			},
			selectionRow: '',
			//分页相关
			total: 0,
			page: 1,
			pageSize: 20,
			// Table相关
			columns: [
				{
					title: '序号',
					type: 'index',
					width: 80,
					align: 'center'
				},
				{
					title: '站所名称',
					key: 'unitName',
					align: 'left'
				},
				{
					title: '设备名称',
					key: 'vcName',
					align: 'left'
				}
			]
		}
	},
	computed: {},
	filters: {},
	watch: {
		activeOrgTreeNodeId: {
			handler() {
				if (this.orgTreeIsStart) {
					this.getAllDeviceList()
				}
			},
			immediate: true
		},
		activeNodeId: {
			handler() {
				if (this.orgTreeIsStart) {
					this.getAllDeviceList()
				}
			},
			immediate: true
		}
	},
	created() {
		this.init()
	},
	mounted() {},
	activited() {},
	update() {},
	beforeDestory() {},
	methods: {
		//确定按钮
		confirmClick() {
			if (this.selectionRow != '') {
				this.$emit('callBack', { shut: false, devRow: this.selectionRow })
			} else {
				this.$Message.warning('请选择设备！！！')
			}
		},
		//取消按钮
		cancelClick() {
			this.$emit('callBack', { shut: true })
		},

		init() {
			this.getDeviceTypeTreeInfo()
		},
		// 更新 org-tree组件 title
		updateOrgTreeActiveNodeTitle(value) {
			this.activeOrgTreeOrgTitle = value
		},
		// 更新 org-tree组件 节点类型
		updateOrgTreeActiveNodeType(value) {
			this.activeOrgTreeNodeType = value
		},
		// 更新 org-tree组件 节点id
		updateOrgTreeActiveNodeId(value) {
			this.activeOrgTreeNodeId = value
		},
		// 更新 org-tree组件 组织 id
		updateOrgTreeActiveOrgId(value) {
			this.activeOrgTreeOrgId = value
		},
		// 更新 org-tree组件 站所 id
		updateOrgTreeActiveStationId(value) {
			this.activeOrgTreeStationId = value
		},
		// 搜索查询
		handleQueryList() {
			this.page = 1
			this.getAllDeviceList()
		},
		// 重置搜索信息并查询
		handleResetList() {
			Object.keys(this.searchInfo).forEach(item => {
				this.searchInfo[item] = ''
			})
			this.page = 1
			this.pageSize = 20
			this.getAllDeviceList()
		},
		// 当前选择节点
		handleSelectChange(currentRow, oldCurrentRow) {
			this.selectionRow = currentRow
		},
		//当前行
		rowClassName(row, index) {
			// if (index % 2 == 0) {
			// 	return 'table-row1'
			// } else {
			// 	return 'table-row2'
			// }
		},
		// 获取设备类型树信息
		async getDeviceTypeTreeInfo() {
			let result = await this.$api.deviceManage.deviceModeling.getDeviceTypeTreeInfo({
				treeType: 2,
				subSystemId: 0,
				type: 0
			})
			if (result.success) {
				// 获取数据
				let tempData = {
					title: '全部子系统',
					flag: -1,
					id: '',
					expand: true,
					children: []
				}

				result.data.map(item => {
					tempData.children.push(item)
				})

				this.treeData.push(tempData)

				// 处理默认参数
				if (this.treeData[0].children[0]) {
					// 默认选中第一个父节点
					this.treeData[0]['selected'] = true
					// 默认展开第一层子系统前三个节点数据
					this.treeData[0].children.forEach((item, index) => {
						if (index < 1) item.expand = true
					})
					// 默认的下级请求参数 nodeType 0:子系统 1:设备类型
					this.nodeType = this.treeData[0]['flag']
					// 更新 当前节点id
					this.activeNodeId = this.treeData[0]['id']
					// 默认的下级请求参数 子系统id
					this.activeSubsystemId = this.treeData[0]['id']
					// 默认的当前节点title
					this.activeTypeTiele = this.treeData[0]['title']
				} else {
					this.nodeType = null
					this.activeSubsystemId = ''
					this.activeTypeTiele = ''
				}
			}
		},
		// 获取所有设备列表
		async getAllDeviceList() {
			try {
				this.tableLoading = true
				let OrgId = ''
				let StationId = ''
				if (this.activeOrgTreeNodeType == 0) {
					OrgId = this.activeOrgTreeOrgId
					StationId = ''
				} else if (this.activeOrgTreeNodeType == 1) {
					OrgId = ''
					StationId = this.activeOrgTreeStationId
				}
				let SubsystemId = ''
				let DeviceTypeId = ''
				if (this.nodeType == 0) {
					SubsystemId = this.activeSubsystemId
					DeviceTypeId = ''
				} else if (this.nodeType == 1) {
					SubsystemId = ''
					DeviceTypeId = this.activeDeviceTypeId
				}
				let result = await this.$api.deviceManage.deviceModeling.getAllDeviceList({
					orgId: OrgId,
					unitId: StationId,
					subSystemId: SubsystemId,
					devTypeId: DeviceTypeId,
					vcName: this.searchInfo.devicename,
					currentPage: this.page,
					pageSize: this.pageSize
				})
				if (result.success) {
					this.tableData = result.data.lists
					this.total = result.data.page.totalNum
					this.tableLoading = false
				} else {
					this.total = 0
					this.tableLoading = false
				}
			} catch (e) {
				this.tableData = []
				this.total = 0
				this.tableLoading = false
				this.$Message.error(`${e}`)
			}
		},
		// 选择节点
		handleSelectNodes(node) {
			if (JSON.stringify(node) == '[]') return

			// 更新 当前节点类型
			this.nodeType = node[0]['flag']
			// 更新 当前节点id
			this.activeNodeId = node[0]['id']
			if (node[0].flag == 0) {
				this.activeSubsystemId = node[0]['id']
			} else {
				this.activeDeviceTypeId = node[0]['id'].split('_')[1]
			}
			// 更新 当前节点title
			this.activeTypeTiele = node[0]['title']
		},
		// 分页跳转
		handleChangePage(page) {
			this.page = page
			this.getAllDeviceList()
		},
		// 改变分页大小
		handleChangeSize(size) {
			this.pageSize = size
			this.getAllDeviceList()
		}
	},
	beforeRouteEnter(to, from, next) {
		next()
	},
	beforeRouteUpdate(to, from, next) {
		next()
	},
	beforeRouteLeave(to, from, next) {
		next()
	}
}
</script>
<style lang="stylus" scoped>
.device-modeling-modal {
  width: 100%;
  height: 100%;

  .center {
    width: 100%;
    height: 100%;
    display: flex;
    // flex-direction: row-reverse;
    // justify-content: flex-end !important;
    position: relative;

    .tree {
      // width: 220px;
      width: 15%;
      background: #fff;

      .ivu-tabs-bar {
        margin-bottom: 5px;
      }

      /deep/ .ivu-tree {
        width: 100%;
        height: calc(90vh - 200px);
        overflow-y: auto;
      }
    }

    .container {
      // float: left;
      // width: 1390px;
      width: 85%;
      overflow: hidden;
      /* float: left; */
      padding-left: 10px;

      .operation {
        .search-header-wrapper {
          padding: 0 !important;
        }

        .form-item {
          margin-bottom: initial;
        }

        .reset, .delete {
          margin-left: 10px;
        }

        .wrap1 {
          button {
            margin-right: 10px;
          }
        }
      }

      .ivu-table-wrapper {
        // height: calc(100vh - 360px) !important;
        .ivu-table-body, .ivu-table-overflowY, .ivu-table-tip, .ivu-table-tip td {
          // height: calc(100vh - 400px) !important;
        }

        .wrap {
          display: flex;
          justify-content: space-around !important;

          > i {
            font-size: 20px;
          }
        }
      }

      .ivu-table .table-row1 td {
        background-color: #fff;
      }

      .ivu-table .table-row2 td {
        background-color: #eff9ff;
      }

      .ivu-table-row-hover td {
        background-color: #ddf2ff !important;
        cursor: pointer;
      }

      .ivu-page {
        margin-top: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
      }
    }
  }

  .footer {
    border-top: 1px solid rgb(232, 234, 236);
    margin-top: 10px;
    padding: 10px 0 0;
    height: 45px;

    .confirmBut, .cancelBut {
      margin-left: 10px;
      float: right;
    }
  }
}
</style>
