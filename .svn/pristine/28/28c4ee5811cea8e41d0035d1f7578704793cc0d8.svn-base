<template>
	<div class="transfer-main">
		<el-row>
			<el-col :span="12">
				<div class="transfer-main-left">
					<div class="title">
						<el-checkbox v-model="checkAllFlag" @change="handleCheckAll">未配置
						</el-checkbox>
					</div>
					<el-input placeholder="请输入关键字" v-model="filterText"><i slot="prefix" class="el-input__icon el-icon-search"></i>
					</el-input>
					<div class="content">
						<el-tree
							ref="tree"
							:data="treeList"
							empty-text="查询无数据"
							show-checkbox
							node-key="key"
							@check="checkChange"
							:props="defaultProps"
							:filter-node-method="filterNode"
						>
						</el-tree>
						<!--						<Tree :data="treeList" show-checkbox></Tree>-->
					</div>
				</div>
			</el-col>
			<el-col :span="12">
				<div class="transfer-main-left">
					<div class="title"></div>
					<div class="content2">
						<el-tree
							ref="tree2"
							:data="selectedTree"
							node-key="key"
							:props="defaultProps"
							default-expand-all
							empty-text="暂无配置的视频信息"
						>
						</el-tree>
					</div>
				</div>
			</el-col>
		</el-row>
	</div>
</template>

<script>
	export default {
		name: 'markdown_page',
		props: {
			treeList: {
				type: Array,
				required: true
			}
		},
		components: {},
		data() {
			return {
				filterText: '',
				content: '',
				checkAllFlag: false,
				checkNodeList: [],
				defaultProps: {
					children: 'children',
					label: 'label'
				},
				selectedTree: []
			}
		},
		created() {

		},
		mounted() {

		},
		watch: {
			filterText(val) {
				this.$refs.tree.filter(val)
			}
		},
		methods: {
			// 全选逻辑添加
			handleCheckAll() {
				this.checkNodeList = []
				this.treeList.forEach(item => {
					this.checkNodeList.push(item.key)
				})
				if (this.checkAllFlag) {
					this.$refs.tree.setCheckedKeys(this.checkNodeList)
					this.selectedTree = this.treeList
				} else {
					this.$refs.tree.setCheckedKeys([])
					this.selectedTree = []
				}
			},
			// 数组转换成已配置树
			getArray(data, param) {
				console.log(param)
				let newArr = []
				// 拷贝树参数
				newArr = JSON.parse(JSON.stringify([...param.halfCheckNodes]))
				// 针对勾选树子节点渲染已配置树结构逻辑处理
				newArr.map(i => i.children = i.children.filter(item => param.checkKey.some(i => i == item.key)))
				// 针对勾选树父节点渲染已配置树结构逻辑处理
				newArr.unshift(...(param.checkNode.filter(item => item.children.length > 0 || !item.id)))
				return newArr
			},
			// 点击树复选框同时渲染已配置树列操作
			checkChange(data, node) {
				data.children = data.children.length > 0 ? data.children : []
				const param = {
					checkKey: JSON.parse(JSON.stringify([...node.checkedKeys])),
					halfCheckNodes: JSON.parse(JSON.stringify([...node.halfCheckedNodes])),
					checkNode: JSON.parse(JSON.stringify([...node.checkedNodes])),
					halfCheckedKey: JSON.parse(JSON.stringify([...node.halfCheckedKeys]))
				}
				// 根据树形结构回写树结构
				this.selectedTree = this.getArray(data, param)
				this.checkAllFlag = this.checkAllNum() == this.$refs.tree.getCheckedKeys().length
			},
			//  勾选判断全选逻辑处理
			checkAllNum() {
				let num = 0
				this.treeList.forEach(item => {
					num++
					if (item.children) {
						item.children.forEach(i => {
							num++
						}
					)
					}
				})
				return num
			},
			// 树的模糊查询方法
			filterNode(value, data, node) {
				// 如果什么都没填就直接返回
				if (!value) return true
				// 如果传入的value和data中的label相同说明是匹配到了
				if (data.label.indexOf(value) !== -1) {
					return true
				}
				// 否则要去判断它是不是选中节点的子节点
				return this.checkBelongToChooseNode(value, data, node)
			},
			// 判断传入的节点是不是选中节点的子节点
			checkBelongToChooseNode(value, data, node) {
				const level = node.level
				// 如果传入的节点本身就是一级节点就不用校验了
				if (level === 1) {
					return false
				}
				// 先取当前节点的父节点
				let parentData = node.parent
				// 遍历当前节点的父节点
				let index = 0
				while (index < level - 1) {
					// 如果匹配到直接返回
					if (parentData.data.label.indexOf(value) !== -1) {
						return true
					}
					// 否则的话再往上一层做匹配
					parentData = parentData.parent
					index++
				}
				// 没匹配到返回false
				return false
			},
			// 清空已勾选数据
			clearList() {
				this.selectedTree = []
			},
			// 回写勾选函数
			setCheckedKey(idList) {
				const idArr = idList
				this.$refs.tree.setCheckedKeys(idArr)
				let nodeList = []
				let halfNodeList = []
				let halfNodeIdList = []
				idArr.forEach(item => {
					nodeList.push(this.$refs.tree.getNode(item).data)
					console.log(this.$refs.tree.getNode(item).parent)
					if (this.$refs.tree.getNode(item).parent.level == 1) {
						halfNodeList.push(this.$refs.tree.getNode(item).parent.data)
						let isAllflag = this.$refs.tree.getNode(item).parent.data.children.every(item => idArr.indexOf(item.id) > -1)
						if (!isAllflag) {
							halfNodeIdList.push(this.$refs.tree.getNode(item).parent.id)
						}
					}
					// if(this.$refs.tree.getNode(item))
				})

				console.log(this.$refs.tree.getNode('dev_1cdfe400f1c9461a931d4e3bd65d1f09'))
				let param = {
					checkedKeys: idArr,
					halfCheckedNodes: halfNodeList,
					checkedNodes: nodeList,
					halfCheckedKeys: halfNodeIdList
				}
				console.log(param)
				this.checkChange(this.$refs.tree.getNode('dev_1cdfe400f1c9461a931d4e3bd65d1f09').data, param)
			}
		}
	}
</script>

<style lang="stylus" scoped>
	.transfer-main {
		width: 100%;

		.el-row {
			.el-col {
				padding 10px

				.transfer-main-left {
					width: 100%;
					border: 1px solid #d7dde4;
					height 400px
					border-top-right-radius 6px
					border-top-left-radius 6px

					.title {
						line-height 45px
						padding 0 10px
						background-color: #f7f7f7;
						border-bottom 1px solid #d7dde4
						border-top-right-radius 6px
						border-top-left-radius 6px
						height 45px
					}

					.content {
						height 313px
						overflow auto
						background white
					}
					.content2{
						height 353px
						overflow auto
						background white
					}
				}
			}
		}

	}
</style>
